import numpy as np

def penalty_function(f, g, h, m=10**10):
    penalty = m * (np.sum(np.maximum(0, g)**2) + np.sum(h**2))
    return f + penalty

def cop1(x):
    f = 5 * (np.sum(x[:4]) - np.sum(x[:4]**2)) - np.sum(x[4:])
    g1 = [
        2*x[0] + 2*x[1] + x[9] + x[10] - 10,
        2*x[0] + 2*x[2] + x[9] + x[11] - 10,
        2*x[1] + 2*x[2] + x[10] + x[11] - 10,
        -8*x[0] + x[9],
        -8*x[1] + x[10],
        -8*x[2] + x[11],
        -2*x[3] - x[4] + x[9],
        -2*x[5] - x[6] + x[10],
        -2*x[7] - x[8] + x[11]
    ]
    g2 = [x[i]-1 for i in range(9)] + [x[12]-1]
    g3 = [-1 * x[i] for i in range(12)]
    g4 = [x[i]-100 for i in range(9,12)]
    g = np.array(g1 + g2 + g3 + g4)
    h = np.array([])
    return penalty_function(f, g, h), f

def cop2(x):
    f = 5.3578547*x[2]**2 + 0.8356891*x[0]*x[4] + 37.293239*x[0] - 40792.141
    g = [
        85.334407 + 0.0056858*x[1]*x[4] + 0.00026*x[0]*x[3] + 0.0022053*x[2]*x[4] - 92,
        -(85.334407 + 0.0056858*x[1]*x[4] + 0.00026*x[0]*x[3] + 0.0022053*x[2]*x[4]),
        80.51249 + 0.0071317*x[1]*x[4] + 0.0029955*x[0]*x[1] + 0.0021813*x[2]**2 - 110,
        -(80.51249 + 0.0071317*x[1]*x[4] + 0.0029955*x[0]*x[1] + 0.0021813*x[2]**2 - 90),
        9.300961 + 0.0047026*x[2]*x[4] + 0.0012547*x[0]*x[2] + 0.0019085*x[2]*x[3] - 25,
        -(9.300961 + 0.0047026*x[2]*x[4] + 0.0012547*x[0]*x[2] + 0.0019085*x[2]*x[3] - 20)
    ]
    g1 = [78-x[0], x[0]-102]
    g2 = [33-x[1], x[1]-45]
    g3 = [x[i]-45 for i in range(2,5)]
    g4 = [27-x[i] for i in range(2,5)]
    g = np.array(g + g1 + g2 + g3 + g4)
    h = np.array([])
    return penalty_function(f, g, h), f

def cop3(x):
    f = (x[0]**2 + x[1]**2 + x[0]*x[1] - 14*x[0] - 16*x[1] + (x[2] - 10)**2 +
         4*(x[3] - 5)**2 + (x[4] - 3)**2 + 2*(x[5] - 1)**2 + 5*x[6]**2 +
         7*(x[7] - 11)**2 + 2*(x[8] - 10)**2 + (x[9] - 7)**2 + 45)
    g = [
        -(105 - 4*x[0] - 5*x[1] + 3*x[6] - 9*x[7]),
        -120-7*x[3]+2*x[2]**2+4*(x[1]-3)**2+3*(x[0]-2)**2,
        -( - 10*x[0] + 8*x[1] + 17*x[6] - 2*x[7]),
        -(-x[0]**2 - 2*(x[1] - 2)**2 + 2*x[0]*x[1] - 14*x[4] + 6*x[5]),
        -(8*x[0] - 2*x[1] - 5*x[8] + 2*x[9] + 12),
        -(-5*x[0]**2 - 8*x[1] - (x[2] - 6)**2 + 2*x[3] + 40),
        -(3*x[0] - 6*x[1] - 12*(x[8] - 8)**2 + 7*x[9]),
        -(-0.5*(x[0] - 8)**2 - 2*(x[1] - 4)**2 - 3*x[4]**2 + x[5] + 30)
    ]
    g1 = [x[i]-10 for i in range(10)]
    g2 = [-x[i]-10 for i in range(10)]
    g = np.array(g + g1 + g2)
    h = np.array([])
    return penalty_function(f, g, h), f

def cop4(x):
    f = ((x[0] - 10)**2 + 5*(x[1] - 12)**2 + x[2]**4 + 3*(x[3] - 11)**2 +
         10*x[4]**6 + 7*x[5]**2 + x[6]**4 - 4*x[5]*x[6] - 10*x[5] - 8*x[6])
    g = [
        -(127 - 2*x[0]**2 - 3*x[1]**4 - x[2] - 4*x[3]**2 - 5*x[4]),
        -(196 - 23*x[0] - x[1]**2 - 6*x[5]**2 + 8*x[6]),
        -(282 - 7*x[0] - 3*x[1] - 10*x[2]**2 - x[3] + x[4]),
        -(-4*x[0]**2 - x[1]**2 + 3*x[0]*x[1] - 2*x[2]**2 - 5*x[5] + 11*x[6])
    ]
    g1 = [x[i]-10 for i in range(7)]
    g2 = [-x[i]-10 for i in range(7)]
    g = np.array(g + g1 + g2)
    h = np.array([])
    return penalty_function(f, g, h), f

def cop5(x):
    f = x[0] + x[1] + x[2]
    g = [
        0.0025*(x[3] + x[5]) - 1,
        0.0025*(x[4] + x[6] - x[3]) - 1,
        0.01*(x[7] - x[4]) - 1,
        -(x[0]*x[5] - 833.33252*x[3] - 100*x[0] + 83333.333),
        -(x[1]*x[6] - 1250*x[4] - x[1]*x[3] + 1250*x[3]),
        -(x[2]*x[7] - 1250000 - x[2]*x[4] + 2500*x[4])
    ]
    g1 = [-x[0]+100]
    g2 = [x[i]-10000 for i in range(3)]
    g3 = [-x[i]+1000 for i in range(1,3)]
    g4 = [x[i]-1000 for i in range(3,8)]
    g5 = [-x[i]+1000 for i in range(3,8)]
    g = np.array(g + g1 + g2 + g3 + g4 + g5)
    h = np.array([])
    return penalty_function(f, g, h), f

def cop6(x):
    f = (-24345 + 8720288.849*x[0] - 150512.5253*x[0]*x[1] + 156.6950325*x[0]*x[2] -
         476470.3222*x[0]*x[3] - 729482.8271*x[0]*x[4])
    g = [
        -145421.402*x[0] + 2931.1506*x[0]*x[1] - 40.427932*x[0]*x[2] +
          5106.192*x[0]*x[3] + 15711.36*x[0]*x[4] - 294000,
        -(-145421.402*x[0] + 2931.1506*x[0]*x[1] - 40.427932*x[0]*x[2] +
          5106.192*x[0]*x[3] + 15711.36*x[0]*x[4]),
        -155011.1084*x[0] + 4360.53352*x[0]*x[1] - 12.9493488*x[0]*x[2] + 
        10236.8808*x[0]*x[3] + 13176.786*x[0]*x[4] - 294000,
        -(-155011.1084*x[0] + 4360.53352*x[0]*x[1] - 12.9493488*x[0]*x[2] + 
        10236.8808*x[0]*x[3] + 13176.786*x[0]*x[4]),
        (-326669.5104*x[0] + 7390.68412*x[0]*x[1] - 27.8986976*x[0]*x[2] + 
        16643.076*x[0]*x[3] + 30988.146*x[0]*x[4] - 277200),
        -(-326669.5104*x[0] + 7390.68412*x[0]*x[1] - 27.8986976*x[0]*x[2] + 
        16643.076*x[0]*x[3] + 30988.146*x[0]*x[4]),
        -x[0],
        x[0] - 1000,
        -x[1] + 1.2,
        x[1] - 2.4,
        -x[2] + 20,
        x[2] - 60,
        -x[3] + 9,
        x[3] - 9.3,
        -x[4] + 6.5,
        x[4] - 7,      
    ]
    h = np.array([])
    return penalty_function(f, g, h), f

def cop7(x):
    f = (10*x[0]*np.power(x[1], -1)*np.power(x[3], 2)*np.power(x[5], -3)*np.sqrt(x[6]) + 
         15*np.power(x[0], -1)*np.power(x[1], -2)*x[2]*x[3]*np.power(x[4], -1)*np.sqrt(x[6]) +
         20*np.power(x[0], -2)*x[1]*np.power(x[3], -1)*np.power(x[4], -2)*x[5] + 
         25*np.power(x[0], 2)*np.power(x[1], 2)*np.power(x[2], -1)*np.sqrt(x[4])*np.power(x[5], -2)*x[6])
    g = [
        -1 + 0.5*np.sqrt(abs(x[0]))*np.power(x[2], -1)*np.power(x[5], -2)*x[6] + 
        0.7*np.power(x[0], 3)*x[1]*np.power(x[2], -2)*x[5]*np.sqrt(abs(x[6])) + 
        0.2*np.power(x[1], -1)*x[2]*np.power(x[3], -0.5)*np.power(x[5], 2/3)*np.power(x[6], 0.25),
        -1 + 1.3*np.power(x[0], -0.5)*x[1]*np.power(x[2], -1)*np.power(x[4], -1)*x[5] + 
        0.8*x[2]*np.power(x[3], -1)*np.power(x[4], -1)*np.power(x[5], 2/3) + 
        3.1*np.power(x[0], -1)*np.sqrt(abs(x[1]))*np.power(x[3], -2)*np.power(x[4], -1)*x[5],
        -1 + 2*x[0]*np.power(x[2], -1.5)*x[4]*np.power(x[5], -1)*x[6] +
        0.1*x[1]*np.power(x[2], -0.5)*x[4]*np.power(x[5], -1)*np.power(x[6], -0.5) + 
        np.power(x[0], -1)*x[1]*np.sqrt(abs(x[2]))*x[4] + 
        0.65*np.power(x[1], -2)*x[2]*x[4]*np.power(x[5], -1)*x[6],
        -1 + 0.2*np.power(x[0], -2)*x[1]*np.power(x[3], -1)*np.sqrt(abs(x[4]))*np.power(x[3], 1/3) + 
        0.3*np.sqrt(abs(x[0]))*np.power(x[1], 2)*x[2]*np.power(x[3], 0.3333)*np.power(x[6], 0.25)*np.power(x[3], -2/3) -
        0.4*np.power(x[0], -3)*np.power(x[1], -2)*x[2]*x[4]*np.power(x[6], 0.75) + 
        0.5*np.power(x[2], -2)*x[3]*np.sqrt(abs(x[6]))
    ]
    g1 = [-f+500]
    g2 = [f-3000]
    g3 = [x[i]-10 for i in range(6)]
    g4 = [-x[i]+0.10 for i in range(6)]
    g5 = [x[6]-10, 0.01-x[6]]
    g = np.array(g + g1 + g2 + g3 + g4 + g5)
    h = np.array([])
    return penalty_function(f, g, h), f

def cop8(x):
    f = 0.4*x[0]**0.67*x[6]**-0.67 + 0.4*x[1]**0.67*x[7]**-0.67 + 10 - x[0] - x[1]
    g = [
        0.0588*x[4]*x[6] + 0.1*x[0] - 1,
        0.0588*x[5]*x[7] + 0.1*x[0] + 0.1*x[1] - 1,
        4*x[2]*x[4]**-1 + 2*x[2]**-0.71*x[4]**-1 + 0.0588*x[2]**-1.3*x[6] - 1,
        4*x[3]*x[5]**-1 + 2*x[3]**-0.71*x[5]**-1 + 0.0588*x[3]**-1.3*x[7] - 1
    ]
    g1 = [f-1, 4.2-f]
    g2 = [x[i]-10 for i in range(8)]
    g3 = [-x[i]+0.10 for i in range(8)]
    g = np.array(g + g1 + g2 + g3)
    h = np.array([])
    return penalty_function(f, g, h), f

def cop9(x):
    f = -0.5*(x[0]*x[3] - x[1]*x[2] + x[2]*x[8] + x[4]*x[7] - x[5]*x[6])
    g = [
        x[8]**2 - 1,
        x[2]**2 + x[3]**2 - 1,
        x[4]**2 + x[5]**2 - 1,
        (x[0] - x[4])**2 + (x[1] - x[5])**2 - 1,
        (x[0] - x[6])**2 + (x[1] - x[7])**2 - 1,
        (x[2] - x[4])**2 + (x[3] - x[5])**2 - 1,
        (x[2] - x[6])**2 + (x[3] - x[7])**2 - 1,
        x[0]**2 + (x[1] - x[8])**2 - 1,
        x[6]**2 + (x[7] - x[8])**2 - 1,
        -x[2]*x[8],
        -x[4]*x[8],
        -x[4]*x[7] + x[5]*x[6],
        x[3]*x[4] - x[0]*x[3],
        -x[8]
    ]
    h = np.array([])
    return penalty_function(f, g, h), f

def cop10(x):
    f = sum(2.3*x[3*k] + 0.0001*x[3*k]**2 + 1.7*x[3*k+1] + 0.0001*x[3*k+1]**2 +
            2.2*x[3*k+2] + 0.00015*x[3*k+2]**2 for k in range(5))
    g = [
        *(x[3*j] - x[3*j-2] + 7 - 13 for j in range(1, 5)),
        *(x[3*j+1] - x[3*j-1] + 7 - 14 for j in range(1, 5)),
        *(x[3*j+2] - x[3*j] + 7 - 13 for j in range(1, 5)),
        -(x[0] + x[1] + x[2] - 60),
        -(x[3] + x[4] + x[5] - 50),
        -(x[6] + x[7] + x[8] - 70),
        -(x[9] + x[10] + x[11] - 85),
        -(x[12] + x[13] + x[14] - 100),
        x[0] - 21,
        8 - x[0],
        x[1] - 57,
        43 - x[1],
        x[2] - 16,
        3 - x[2],
        *(x[3*k] - 90 for k in range(5)),
        *(0 - x[3*k] for k in range(5)),
        *(x[3*k+1] - 120 for k in range(5)),
        *(0 - x[3*k+1] for k in range(5)),
        *(x[3*k+2] - 60 for k in range(5)),
        *(0 - x[3*k+2] for k in range(5))
    ]
    h = np.array([])
    return penalty_function(f, g, h), f